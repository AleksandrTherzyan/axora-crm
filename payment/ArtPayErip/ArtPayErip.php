<?phpnamespace Payment\ArtPayErip;use Api\Simpla;class ArtPayErip extends Simpla{		public function checkout_form($order_id, $button_text = null)	{				$payment_settings = $this->payment->get_payment_settings($payment_method->id);				$order = $this->orders->get_order((int)$order_id);		$payment_method = $this->payment->get_payment_method($order->payment_method_id);		$cur_code = $this->money->get_currency(intval($payment_method->currency_id));//получаем код текущей валюты		$payment_settings = $this->payment->get_payment_settings($payment_method->id);		$orderTotal = round($this->money->convert($order->total_price, $payment_method->currency_id, false), 2);		if(!empty($_SESSION['order_id']))		{			$data =                $this->eripAddInvoice(                    $payment_settings['artpay_erip_service_no'],                    $orderTotal,                    $cur_code,                    $order_id                );			if($data['ap_erip_invoice_id'])//если на сервере Artpay заказ создался, очищаем значение order_id в сессии. Это нужно во избежание повторного создания заказа с тем же номером.			{				unset($_SESSION['order_id']);			}			/*Отправим email администратору магазина*/			//			$VendorEmail = $this->settings->order_email;			$ap_erip_invoice_id = $data['ap_erip_invoice_id'];			$sub = "Номер заказа в ЕРИП для заказа $order_id";			$mes = "Заказ номер $order_id в ЕРИП числится под номером $ap_erip_invoice_id";			if($VendorEmail)			{				/*mail ($VendorEmail,$sub,$mes,"Content-type:text/plain; charset = UTF-8\r\nFrom:$VendorEmail");*/				mail ($VendorEmail,$sub,$mes,"Content-type:text/plain; charset = UTF-8\r\nFrom:$VendorEmail");				/*mail ($VendorEmail,$sub,$mes);*/			}			//			/*Отправим email покупателю*/			//			$CustomerEmail = $order->email;			if($CustomerEmail)			{				/*mail ($CustomerEmail,$sub,$mes,"Content-type:text/plain; charset = UTF-8\r\nFrom:$VendorEmail");*/				mail ($CustomerEmail,$sub,$mes,"Content-type:text/plain; charset = UTF-8\r\nFrom:$VendorEmail");				/*mail ($CustomerEmail,$sub,$mes);*/			}		//			if($data['ap_erip_invoice_id'])			{				$erip_text_message = 'Номер вашего заказа: '.$order_id.'. Номер заказа в ЕРИП: <strong>'.$ap_erip_invoice_id.'</strong>. Внимание! Запишите этот номер, он понадобится для оплаты заказа.';			}			else			{				$erip_text_message = "Внимание! По техническим причинам ваш заказ не зарегистрирован! Попробуйте еще раз.";			}			$button = '<div>'.$erip_text_message.'</div>';		}else		{			$erip_text_message = "Ваш заказ в ЕРИП уже сформирован. Номер заказа выслан на вашу электронную почту";			$button = '<div>'.$erip_text_message.'</div>';		}		return $button;	}			public function eripAddInvoice(            $eripNo,            $amount,            $currency,            $order_id        )        {			$order = $this->orders->get_order((int)$order_id);			$payment_method = $this->payment->get_payment_method($order->payment_method_id);			$payment_settings = $this->payment->get_payment_settings($payment_method->id);						$description = 'Оплата заказа №' . $order_id;						            $data = array(                    'ap_request' => 'EripAddInvoice',                    'ap_storeid' => $payment_settings['ap_storeid'],					'ap_order_num' => $order_id,                    'ap_client_dt' => date('r'),                    'ap_proto_ver' => '1.3.0',                    'ap_lang' => 'ru',                    'ap_test' => $payment_settings['ap_test'] ? '1' : '0',                    'ap_erip_service_no' => $eripNo,                    'ap_amount' => $amount,                    'ap_currency' => $currency->code,                    'ap_invoice_desc' => $description                );				/*$data =                [                    'ap_request' => 'EripAddInvoice',                    'ap_storeid' => $payment_settings['ap_storeid'],					'ap_order_num' => $order_id,                    'ap_client_dt' => date('r'),                    'ap_proto_ver' => '1.3.0',                    'ap_lang' => 'ru',                    'ap_test' => $payment_settings['ap_test'] ? '1' : '0',                    'ap_erip_service_no' => $eripNo,                    'ap_amount' => $amount,                    'ap_currency' => $currency->code,                    'ap_invoice_desc' => $description                ];*/                          $data = $this->call($data, $payment_settings['artpay_secret1'], $payment_settings['artpay_secret2']);            return $data;        }			private function call($data, $secret1, $secret2)        {            $data = $this->addSignature($data, $secret1);			            $json = json_encode($data);			$apiUrl = ($data['ap_test'])			? 'https://api-sandbox-artpay.dev-3c.by/v2/'			: 'https://api.artpay.by/v2/';						$request = curl_init();            			//CURLOPT_VERBOSE => 0,			//CURLOPT_SSL_VERIFYHOST => 1						curl_setopt_array(			$request,				array(					CURLOPT_URL => $apiUrl,					CURLOPT_HEADER => 0,					CURLOPT_VERBOSE => 0,					CURLOPT_POST => 1,					CURLOPT_POSTFIELDS => $json,					CURLOPT_SSL_VERIFYHOST => 0,					CURLOPT_SSL_VERIFYPEER => 0,					CURLOPT_RETURNTRANSFER => 1,					CURLOPT_HTTPHEADER => array(						'Content-Type: application/json'					)				)			);			$response = curl_exec($request);            curl_close($request);            $data_new =                json_decode(                    $response,                    true                );            return $data_new;        }			function addSignature($data, $secret1, $algo = 'sha512')        {			uksort($data, 'strnatcmp');			            $string = '';            foreach ($data as $param => $value)                $string .= $value . ';';            $string .= $secret1;            $data['ap_signature'] = hash($algo, $string);            return $data;        }		        function checkSignature($data, $secret2, $algo = 'sha512')        {            if (                !is_array($data)                || !isset($data['ap_signature'])            )                return false;            $checkedSignature = $data['ap_signature'];            unset($data['ap_signature']);            uksort($data, 'strnatcmp');            $string =                implode(';', $data)                . ';'                . $secret2;            return hash($algo, $string) == $checkedSignature;        }}?>